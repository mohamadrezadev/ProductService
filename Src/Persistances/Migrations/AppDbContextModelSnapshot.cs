// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistances.Data;

#nullable disable

namespace Persistances.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Circulation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CopyCount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("CutMargin")
                        .HasColumnType("real");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCalculatePrice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCheckFile")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCmyk")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCustomCirculation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCustomPage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCustomSize")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MaxCirculation")
                        .HasColumnType("int");

                    b.Property<float>("MaxLength")
                        .HasColumnType("real");

                    b.Property<int>("MaxPage")
                        .HasColumnType("int");

                    b.Property<float>("MaxWidth")
                        .HasColumnType("real");

                    b.Property<int>("MinCirculation")
                        .HasColumnType("int");

                    b.Property<float>("MinLength")
                        .HasColumnType("real");

                    b.Property<int>("MinPage")
                        .HasColumnType("int");

                    b.Property<float>("MinWidth")
                        .HasColumnType("real");

                    b.Property<string>("PageCount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PrintMargin")
                        .HasColumnType("real");

                    b.Property<byte>("PrintSide")
                        .HasColumnType("tinyint");

                    b.Property<int?>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<byte>("ProductType")
                        .HasColumnType("tinyint");

                    b.Property<int>("SheetDimensionId")
                        .HasColumnType("int");

                    b.Property<int>("WorkTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ProductAdt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdtId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<bool>("IsJeld")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<byte>("Side")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAdts");
                });

            modelBuilder.Entity("ProductAdtPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("ProductAdtId")
                        .HasColumnType("int");

                    b.Property<int>("ProductAdtTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductPriceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductAdtId");

                    b.ToTable("ProductAdtPrices");
                });

            modelBuilder.Entity("ProductAdtType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdtTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductAdtId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductAdtId");

                    b.ToTable("ProductAdtTypes");
                });

            modelBuilder.Entity("ProductDeliver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("CalcType")
                        .HasColumnType("tinyint");

                    b.Property<int>("EndCirculation")
                        .HasColumnType("int");

                    b.Property<bool>("IsIncreased")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<byte>("PrintSide")
                        .HasColumnType("tinyint");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("StartCirculation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDelivers");
                });

            modelBuilder.Entity("ProductDeliverSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductDeliverId")
                        .HasColumnType("int");

                    b.Property<int>("ProductSizeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductDeliverId");

                    b.ToTable("ProductDeliverSizes");
                });

            modelBuilder.Entity("ProductJeld", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<float>("CutMargin")
                        .HasColumnType("real");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Id")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCheckFile")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCmyk")
                        .HasColumnType("bit");

                    b.Property<float>("PrintMargin")
                        .HasColumnType("real");

                    b.Property<byte>("PrintSide")
                        .HasColumnType("tinyint");

                    b.HasKey("ProductId");

                    b.ToTable("ProductJelds");
                });

            modelBuilder.Entity("ProductMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCombinedMaterial")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCustomCirculation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsJeld")
                        .HasColumnType("bit");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductMaterials");
                });

            modelBuilder.Entity("ProductMaterialAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MaterialAttributeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductMaterialId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductMaterialId");

                    b.ToTable("ProductMaterialAttributes");
                });

            modelBuilder.Entity("ProductPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Circulation")
                        .HasColumnType("int");

                    b.Property<int>("CopyCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsDoubleSided")
                        .HasColumnType("bit");

                    b.Property<bool>("IsJeld")
                        .HasColumnType("bit");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("ProductMaterialAttributeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductMaterialId")
                        .HasColumnType("int");

                    b.Property<int>("ProductPrintKindId")
                        .HasColumnType("int");

                    b.Property<int>("ProductSizeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductPrices");
                });

            modelBuilder.Entity("ProductPrintKind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsJeld")
                        .HasColumnType("bit");

                    b.Property<int>("PrintKindId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPrintKinds");
                });

            modelBuilder.Entity("ProductSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Length")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SheetCount")
                        .HasColumnType("int");

                    b.Property<int>("SheetDimensionId")
                        .HasColumnType("int");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductSizes");
                });

            modelBuilder.Entity("ProductsGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("enable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ProductsGroups");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.HasOne("ProductsGroup", "ProductsGroup")
                        .WithMany("Products")
                        .HasForeignKey("ProductGroupId");

                    b.Navigation("ProductsGroup");
                });

            modelBuilder.Entity("ProductAdt", b =>
                {
                    b.HasOne("Product", "Product")
                        .WithMany("ProductAdts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductAdtPrice", b =>
                {
                    b.HasOne("ProductAdt", "ProductAdt")
                        .WithMany("ProductAdtPrices")
                        .HasForeignKey("ProductAdtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductAdt");
                });

            modelBuilder.Entity("ProductAdtType", b =>
                {
                    b.HasOne("ProductAdt", "ProductAdt")
                        .WithMany("ProductAdtTypes")
                        .HasForeignKey("ProductAdtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductAdt");
                });

            modelBuilder.Entity("ProductDeliver", b =>
                {
                    b.HasOne("Product", "Product")
                        .WithMany("ProductDelivers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductDeliverSize", b =>
                {
                    b.HasOne("ProductDeliver", "ProductDeliver")
                        .WithMany("ProductDeliverSizes")
                        .HasForeignKey("ProductDeliverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductDeliver");
                });

            modelBuilder.Entity("ProductMaterial", b =>
                {
                    b.HasOne("Product", "Product")
                        .WithMany("ProductMaterials")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductMaterialAttribute", b =>
                {
                    b.HasOne("ProductMaterial", "ProductMaterial")
                        .WithMany("ProductMaterialAttributes")
                        .HasForeignKey("ProductMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductMaterial");
                });

            modelBuilder.Entity("ProductPrintKind", b =>
                {
                    b.HasOne("Product", "Product")
                        .WithMany("ProductPrintKinds")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductSize", b =>
                {
                    b.HasOne("Product", "Product")
                        .WithMany("ProductSizes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Navigation("ProductAdts");

                    b.Navigation("ProductDelivers");

                    b.Navigation("ProductMaterials");

                    b.Navigation("ProductPrintKinds");

                    b.Navigation("ProductSizes");
                });

            modelBuilder.Entity("ProductAdt", b =>
                {
                    b.Navigation("ProductAdtPrices");

                    b.Navigation("ProductAdtTypes");
                });

            modelBuilder.Entity("ProductDeliver", b =>
                {
                    b.Navigation("ProductDeliverSizes");
                });

            modelBuilder.Entity("ProductMaterial", b =>
                {
                    b.Navigation("ProductMaterialAttributes");
                });

            modelBuilder.Entity("ProductsGroup", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
